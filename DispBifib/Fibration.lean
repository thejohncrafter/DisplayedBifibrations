import DispBifib.Notation
import DispBifib.IdxEq
import DispBifib.Category

import DispBifib.Displayed

namespace DispBifib

structure Cartesian
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ}
  {a‚ÇÄ b‚ÇÄ : C‚ÇÄ} {a : C a‚ÇÄ} {b : C b‚ÇÄ}
  {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} (f : a [ f‚ÇÄ ]‚ü∂ b)
where
  bang
    : {c‚ÇÄ : C‚ÇÄ} ‚Üí {c : C c‚ÇÄ}
    ‚Üí {g‚ÇÄ : c‚ÇÄ ‚ü∂ b‚ÇÄ} ‚Üí (g : c [ g‚ÇÄ ]‚ü∂ b)
    ‚Üí (w‚ÇÄ : c‚ÇÄ ‚ü∂ a‚ÇÄ)
    ‚Üí w‚ÇÄ ‚â´ f‚ÇÄ = g‚ÇÄ
    ‚Üí (c [ w‚ÇÄ ]‚ü∂ a)
  bang_prop :
    ‚àÄ {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ},
    ‚àÄ {g‚ÇÄ : c‚ÇÄ ‚ü∂ b‚ÇÄ} (g : c [ g‚ÇÄ ]‚ü∂ b),
    ‚àÄ (w‚ÇÄ : c‚ÇÄ ‚ü∂ a‚ÇÄ),
      (h : w‚ÇÄ ‚â´ f‚ÇÄ = g‚ÇÄ) ‚Üí bang g w‚ÇÄ h ‚â´ f =* g
  bang_unique :
    ‚àÄ {g‚ÇÄ : c‚ÇÄ ‚ü∂ b‚ÇÄ} (g : c [ g‚ÇÄ ]‚ü∂ b),
    ‚àÄ (w‚ÇÄ : c‚ÇÄ ‚ü∂ a‚ÇÄ), (h : w‚ÇÄ ‚â´ f‚ÇÄ = g‚ÇÄ) ‚Üí
    ‚àÄ (w' : c [ w‚ÇÄ ]‚ü∂ a),
      w' ‚â´ f =* g ‚Üí w' = bang g w‚ÇÄ h

class Fibration
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ)
where
  cleavage_obj
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ}
    ‚Üí (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ)
    ‚Üí (b : C b‚ÇÄ)
    ‚Üí C a‚ÇÄ
  cleavage_hom
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ}
    ‚Üí (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ)
    ‚Üí (b : C b‚ÇÄ)
    ‚Üí ((cleavage_obj f‚ÇÄ b) [ f‚ÇÄ ]‚ü∂ b)
  cleavage_prop
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ}
    ‚Üí (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ)
    ‚Üí (b : C b‚ÇÄ)
    ‚Üí Cartesian (cleavage_hom f‚ÇÄ b)

def lift_obj
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Fibration C]
  : {x y : C‚ÇÄ} ‚Üí (f : x ‚ü∂ y) ‚Üí C y ‚Üí C x
:= fib.cleavage_obj

def lift_hom
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Fibration C]
  : {x y : C‚ÇÄ} ‚Üí (f : x ‚ü∂ y) ‚Üí (b : C y) ‚Üí ((lift_obj f b) [ f ]‚ü∂ b)
:= fib.cleavage_hom

def bang
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (b : C y)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : c‚ÇÄ ‚ü∂ y} (g : c [ g‚ÇÄ ]‚ü∂ b)
  (w‚ÇÄ : c‚ÇÄ ‚ü∂ x)
  (h : w‚ÇÄ ‚â´ f = g‚ÇÄ)
  : c [ w‚ÇÄ ]‚ü∂ lift_obj f b
:= (fib.cleavage_prop f b).bang g w‚ÇÄ h

def bang_prop
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (b : C y)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : c‚ÇÄ ‚ü∂ y} (g : c [ g‚ÇÄ ]‚ü∂ b)
  (w‚ÇÄ : c‚ÇÄ ‚ü∂ x)
  (h : w‚ÇÄ ‚â´ f = g‚ÇÄ)
  : bang f b g w‚ÇÄ h ‚â´ lift_hom f b =* g
:= (fib.cleavage_prop f b).bang_prop g w‚ÇÄ h

def bang_unique
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (b : C y)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : c‚ÇÄ ‚ü∂ y} (g : c [ g‚ÇÄ ]‚ü∂ b)
  (w‚ÇÄ : c‚ÇÄ ‚ü∂ x)
  (h : w‚ÇÄ ‚â´ f = g‚ÇÄ)
  : ‚àÄ (w' : c [ w‚ÇÄ ]‚ü∂ lift_obj f b),
    (w' ‚â´ lift_hom f b =* g) ‚Üí w' = bang f b g w‚ÇÄ h
:= (fib.cleavage_prop f b).bang_unique g w‚ÇÄ h

def pullback_functor
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ) [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) : fiber C y ‚áí fiber C x
where
  map b := lift_obj f b
  fmap {b b' : C y} (g : b [ ùüô y ]‚ü∂ b') :=
    have p : ùüô x ‚â´ f = f ‚â´ ùüô y := by rw [C‚ÇÄ.id_comp, C‚ÇÄ.comp_id]
    bang f b' (lift_hom f b ‚â´ g) (ùüô x) p
  fmap_id b := by
    symm
    apply bang_unique f b
    exact .trans (C.id_comp _) (C.comp_id _).symm
  fmap_comp {b‚ÇÅ b‚ÇÇ b‚ÇÉ} g g' := by
    dsimp
    symm
    apply bang_unique f b‚ÇÉ
    apply IdxEq.trans3
      (idxeq_comp (fiber_comp_eq _ _) _)
      _
      (comp_idxeq _ (fiber_comp_eq _ _).symm)
    apply IdxEq.trans3 (C.assoc _ _ _) _ (C.assoc _ _ _)
    apply IdxEq.trans (comp_idxeq _ (bang_prop f b‚ÇÉ _ _ _)) _
    apply IdxEq.trans (C.assoc _ _ _).symm
    apply idxeq_comp (bang_prop _ _ _ _ _)


end DispBifib
