import DispBifib.Notation
import DispBifib.IdxEq
import DispBifib.Category
import DispBifib.Displayed

namespace DispBifib

structure FibrationalProblem
  {C‚ÇÄ : Category u v} (C : DisplayedCategory u' v' C‚ÇÄ) (c‚ÇÄ : C‚ÇÄ)
where
  b‚ÇÄ : C‚ÇÄ
  b : C b‚ÇÄ
  f‚ÇÄ : c‚ÇÄ ‚ü∂ b‚ÇÄ

def FibrationalProblem.pullback
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ}
  {d‚ÇÄ c‚ÇÄ : C‚ÇÄ} (œÜ‚ÇÄ : d‚ÇÄ ‚ü∂ c‚ÇÄ)
  (pb : FibrationalProblem C c‚ÇÄ) : FibrationalProblem C d‚ÇÄ
where
  b‚ÇÄ := pb.b‚ÇÄ
  b := pb.b
  f‚ÇÄ := œÜ‚ÇÄ ‚â´ pb.f‚ÇÄ

@[ext]
structure FibrationalSolution
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ}
  {c‚ÇÄ : C‚ÇÄ} (pb : FibrationalProblem C c‚ÇÄ) (c : C c‚ÇÄ)
where
  f : c [ pb.f‚ÇÄ ]‚ü∂ pb.b

def FibrationalSolution.pullback
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ}
  {c‚ÇÄ : C‚ÇÄ} {pb : FibrationalProblem C c‚ÇÄ}
  {d‚ÇÄ : C‚ÇÄ} {d : C d‚ÇÄ} {c : C c‚ÇÄ} {œÜ‚ÇÄ : d‚ÇÄ ‚ü∂ c‚ÇÄ} (œÜ : d [ œÜ‚ÇÄ ]‚ü∂ c)
  (sol : FibrationalSolution pb c) : FibrationalSolution (pb.pullback œÜ‚ÇÄ) d
where
  f := œÜ ‚â´ sol.f

class Fibration
  {C‚ÇÄ : Category u v} (C : DisplayedCategory u' v' C‚ÇÄ)
where
  obj : (c‚ÇÄ : C‚ÇÄ) ‚Üí FibrationalProblem C c‚ÇÄ ‚Üí C c‚ÇÄ
  sol : (c‚ÇÄ : C‚ÇÄ) ‚Üí (pb : FibrationalProblem C c‚ÇÄ) ‚Üí FibrationalSolution pb (obj c‚ÇÄ pb)
  toHom
    : {c‚ÇÄ d‚ÇÄ : C‚ÇÄ} ‚Üí (œÜ‚ÇÄ : d‚ÇÄ ‚ü∂ c‚ÇÄ)
    ‚Üí (pb : FibrationalProblem C c‚ÇÄ)
    ‚Üí (d : C d‚ÇÄ) ‚Üí FibrationalSolution (pb.pullback œÜ‚ÇÄ) d
    ‚Üí (d [ œÜ‚ÇÄ ]‚ü∂ obj c‚ÇÄ pb)
  inv‚ÇÅ
    : {c‚ÇÄ d‚ÇÄ : C‚ÇÄ} ‚Üí (œÜ‚ÇÄ : d‚ÇÄ ‚ü∂ c‚ÇÄ)
    ‚Üí (pb : FibrationalProblem C c‚ÇÄ)
    ‚Üí (d : C d‚ÇÄ) ‚Üí (s : FibrationalSolution (pb.pullback œÜ‚ÇÄ) d)
    ‚Üí (sol c‚ÇÄ pb).pullback (toHom œÜ‚ÇÄ pb d s) = s
  inv‚ÇÇ
    : {c‚ÇÄ d‚ÇÄ : C‚ÇÄ} ‚Üí (œÜ‚ÇÄ : d‚ÇÄ ‚ü∂ c‚ÇÄ)
    ‚Üí (pb : FibrationalProblem C c‚ÇÄ)
    ‚Üí (d : C d‚ÇÄ) ‚Üí (œÜ : d [ œÜ‚ÇÄ ]‚ü∂ obj c‚ÇÄ pb)
    ‚Üí toHom œÜ‚ÇÄ pb d ((sol c‚ÇÄ pb).pullback œÜ) = œÜ

def lift_obj
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ}
  [fib : Fibration C]
  {b‚ÇÄ a‚ÇÄ : C‚ÇÄ} (f‚ÇÄ : b‚ÇÄ ‚ü∂ a‚ÇÄ) (a : C a‚ÇÄ) : C b‚ÇÄ
:= fib.obj b‚ÇÄ ‚ü® a‚ÇÄ, a, f‚ÇÄ ‚ü©

def lift_hom
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ}
  [fib : Fibration C]
  {b‚ÇÄ a‚ÇÄ : C‚ÇÄ} (f‚ÇÄ : b‚ÇÄ ‚ü∂ a‚ÇÄ) (a : C a‚ÇÄ) : (lift_obj f‚ÇÄ a) [ f‚ÇÄ ]‚ü∂ a
:= (fib.sol b‚ÇÄ ‚ü® a‚ÇÄ, a, f‚ÇÄ ‚ü©).f

def factor
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ} [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (b : C y)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : c‚ÇÄ ‚ü∂ y} (g : c [ g‚ÇÄ ]‚ü∂ b)
  (w‚ÇÄ : c‚ÇÄ ‚ü∂ x)
  (h : w‚ÇÄ ‚â´ f = g‚ÇÄ)
  : c [ w‚ÇÄ ]‚ü∂ lift_obj f b
:= by
  subst h
  exact fib.toHom w‚ÇÄ ‚ü® y, b, f ‚ü© c ‚ü® g ‚ü©

def factor_prop
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ} [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (b : C y)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : c‚ÇÄ ‚ü∂ y} (g : c [ g‚ÇÄ ]‚ü∂ b)
  (w‚ÇÄ : c‚ÇÄ ‚ü∂ x)
  (h : w‚ÇÄ ‚â´ f = g‚ÇÄ)
  : factor f b g w‚ÇÄ h ‚â´ lift_hom f b =* g
:= by
  subst h
  apply idx_eq_of_eq
  exact congrArg FibrationalSolution.f <| fib.inv‚ÇÅ w‚ÇÄ ‚ü® y, b, f ‚ü© c ‚ü® g ‚ü©

def factor_unique
  {C‚ÇÄ : Category u v} {C : DisplayedCategory u' v' C‚ÇÄ} [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (b : C y)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : c‚ÇÄ ‚ü∂ y} (g : c [ g‚ÇÄ ]‚ü∂ b)
  (w‚ÇÄ : c‚ÇÄ ‚ü∂ x)
  (h : w‚ÇÄ ‚â´ f = g‚ÇÄ)
  : ‚àÄ (w' : c [ w‚ÇÄ ]‚ü∂ lift_obj f b),
    (w' ‚â´ lift_hom f b =* g) ‚Üí factor f b g w‚ÇÄ h = w'
:= by
  subst h
  intro w' h'
  have h' := eq_of_idx_eq _ h'; subst h'
  exact fib.inv‚ÇÇ w‚ÇÄ ‚ü® y, b, f ‚ü© c w'

def pullback
  {C‚ÇÄ : Category u v} (C : DisplayedCategory u' v' C‚ÇÄ) [fib : Fibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) : fiber C y ‚áí fiber C x
where
  map b := lift_obj f b
  fmap {b b' : C y} (g : b [ ùüô y ]‚ü∂ b') :=
    have p : ùüô x ‚â´ f = f ‚â´ ùüô y := by rw [C‚ÇÄ.id_comp, C‚ÇÄ.comp_id]
    factor f b' (lift_hom f b ‚â´ g) (ùüô x) p
  fmap_id b := by
    apply factor_unique f b
    exact .trans (C.id_comp _) (C.comp_id _).symm
  fmap_comp {b‚ÇÅ b‚ÇÇ b‚ÇÉ} g g' := by
    dsimp
    apply factor_unique f b‚ÇÉ
    apply IdxEq.trans3
      (idxeq_comp (fiber_comp_eq _ _) _)
      _
      (comp_idxeq _ (fiber_comp_eq _ _).symm)
    apply IdxEq.trans3 (C.assoc _ _ _) _ (C.assoc _ _ _)
    apply IdxEq.trans (comp_idxeq _ (factor_prop f b‚ÇÉ _ _ _)) _
    apply IdxEq.trans (C.assoc _ _ _).symm
    apply idxeq_comp (factor_prop _ _ _ _ _)

end DispBifib
