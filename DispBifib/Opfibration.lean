import DispBifib.Notation
import DispBifib.IdxEq
import DispBifib.Category
import DispBifib.Displayed

namespace DispBifib

structure OpfibrationalProblem
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ) (c‚ÇÄ : C‚ÇÄ)
where
  b‚ÇÄ : C‚ÇÄ
  b : C b‚ÇÄ
  f‚ÇÄ : b‚ÇÄ ‚ü∂ c‚ÇÄ

def OpfibrationalProblem.pullback
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ}
  {d‚ÇÄ c‚ÇÄ : C‚ÇÄ} (œÜ‚ÇÄ : c‚ÇÄ ‚ü∂ d‚ÇÄ)
  (pb : OpfibrationalProblem C c‚ÇÄ) : OpfibrationalProblem C d‚ÇÄ
where
  b‚ÇÄ := pb.b‚ÇÄ
  b := pb.b
  f‚ÇÄ := pb.f‚ÇÄ ‚â´ œÜ‚ÇÄ

@[ext]
structure OpfibrationalSolution
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ}
  {c‚ÇÄ : C‚ÇÄ} (pb : OpfibrationalProblem C c‚ÇÄ) (c : C c‚ÇÄ)
where
  f : pb.b [ pb.f‚ÇÄ ]‚ü∂ c

def OpfibrationalSolution.pullback
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ}
  {c‚ÇÄ : C‚ÇÄ} {pb : OpfibrationalProblem C c‚ÇÄ}
  {d‚ÇÄ : C‚ÇÄ} {d : C d‚ÇÄ} {c : C c‚ÇÄ} {œÜ‚ÇÄ : c‚ÇÄ ‚ü∂ d‚ÇÄ} (œÜ : c [ œÜ‚ÇÄ ]‚ü∂ d)
  (sol : OpfibrationalSolution pb c) : OpfibrationalSolution (pb.pullback œÜ‚ÇÄ) d
where
  f := sol.f ‚â´ œÜ

class Opfibration
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ)
where
  obj : (c‚ÇÄ : C‚ÇÄ) ‚Üí OpfibrationalProblem C c‚ÇÄ ‚Üí C c‚ÇÄ
  sol : (c‚ÇÄ : C‚ÇÄ) ‚Üí (pb : OpfibrationalProblem C c‚ÇÄ) ‚Üí OpfibrationalSolution pb (obj c‚ÇÄ pb)
  toHom
    : {c‚ÇÄ d‚ÇÄ : C‚ÇÄ} ‚Üí (œÜ‚ÇÄ : c‚ÇÄ ‚ü∂ d‚ÇÄ)
    ‚Üí (pb : OpfibrationalProblem C c‚ÇÄ)
    ‚Üí (d : C d‚ÇÄ) ‚Üí OpfibrationalSolution (pb.pullback œÜ‚ÇÄ) d
    ‚Üí ((obj c‚ÇÄ pb) [ œÜ‚ÇÄ ]‚ü∂ d)
  inv‚ÇÅ
    : {c‚ÇÄ d‚ÇÄ : C‚ÇÄ} ‚Üí (œÜ‚ÇÄ : c‚ÇÄ ‚ü∂ d‚ÇÄ)
    ‚Üí (pb : OpfibrationalProblem C c‚ÇÄ)
    ‚Üí (d : C d‚ÇÄ) ‚Üí (s : OpfibrationalSolution (pb.pullback œÜ‚ÇÄ) d)
    ‚Üí (sol c‚ÇÄ pb).pullback (toHom œÜ‚ÇÄ pb d s) = s
  inv‚ÇÇ
    : {c‚ÇÄ d‚ÇÄ : C‚ÇÄ} ‚Üí (œÜ‚ÇÄ : c‚ÇÄ ‚ü∂ d‚ÇÄ)
    ‚Üí (pb : OpfibrationalProblem C c‚ÇÄ)
    ‚Üí (d : C d‚ÇÄ) ‚Üí (œÜ : (obj c‚ÇÄ pb) [ œÜ‚ÇÄ ]‚ü∂ d)
    ‚Üí toHom œÜ‚ÇÄ pb d ((sol c‚ÇÄ pb).pullback œÜ) = œÜ

def oplift_obj
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {a‚ÇÄ b‚ÇÄ : C‚ÇÄ} (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ) (a : C a‚ÇÄ) : C b‚ÇÄ
:= fib.obj b‚ÇÄ ‚ü® a‚ÇÄ, a, f‚ÇÄ ‚ü©

def oplift_hom
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {a‚ÇÄ b‚ÇÄ : C‚ÇÄ} (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ) (a : C a‚ÇÄ) : (a [ f‚ÇÄ ]‚ü∂ oplift_obj f‚ÇÄ a)
:= (fib.sol b‚ÇÄ ‚ü® a‚ÇÄ, a, f‚ÇÄ ‚ü©).f

def opfactor
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (a : C x)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : x ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c)
  (w‚ÇÄ : y ‚ü∂ c‚ÇÄ)
  (h : f ‚â´ w‚ÇÄ = g‚ÇÄ)
  : (oplift_obj f a) [ w‚ÇÄ ]‚ü∂ c
:= by
  subst h
  exact fib.toHom w‚ÇÄ ‚ü® x, a, f ‚ü© c ‚ü® g ‚ü©

def opfactor_prop
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (a : C x)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : x ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c)
  (w‚ÇÄ : y ‚ü∂ c‚ÇÄ)
  (h : f ‚â´ w‚ÇÄ = g‚ÇÄ)
  : oplift_hom f a ‚â´ opfactor f a g w‚ÇÄ h =* g
:= by
  subst h
  apply idx_eq_of_eq
  exact congrArg OpfibrationalSolution.f <| fib.inv‚ÇÅ w‚ÇÄ ‚ü® x, a, f ‚ü© c ‚ü® g ‚ü©

def opfactor_unique
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (a : C x)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : x ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c)
  (w‚ÇÄ : y ‚ü∂ c‚ÇÄ)
  (h : f ‚â´ w‚ÇÄ = g‚ÇÄ)
  : ‚àÄ (w' : (oplift_obj f a) [ w‚ÇÄ ]‚ü∂ c),
    (oplift_hom f a ‚â´ w' =* g) ‚Üí opfactor f a g w‚ÇÄ h = w'
:= by
  subst h
  intro w' h'
  have h' := eq_of_idx_eq _ h'; subst h'
  exact fib.inv‚ÇÇ w‚ÇÄ ‚ü® x, a, f ‚ü© c w'

def pushforward
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ) [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) : fiber C x ‚áí fiber C y
where
  map a := oplift_obj f a
  fmap {a a' : C x} (g : a [ ùüô x ]‚ü∂ a') :=
    have p : f ‚â´ ùüô y = ùüô x ‚â´ f := by rw [C‚ÇÄ.id_comp, C‚ÇÄ.comp_id]
    opfactor f a (g ‚â´ oplift_hom f a') (ùüô y) p
  fmap_id a := by
    apply opfactor_unique f a
    exact .trans (C.comp_id _) (C.id_comp _).symm
  fmap_comp {a‚ÇÅ a‚ÇÇ a‚ÇÉ} g g' := by
    apply opfactor_unique f a‚ÇÅ
    apply IdxEq.trans3
      (comp_idxeq _ (fiber_comp_eq _ _))
      _
      (idxeq_comp (fiber_comp_eq _ _).symm _)
    apply IdxEq.trans3 (C.assoc _ _ _).symm _ (C.assoc _ _ _).symm
    apply IdxEq.trans (idxeq_comp (opfactor_prop f a‚ÇÅ _ _ _) _) _
    apply IdxEq.trans (C.assoc _ _ _)
    apply comp_idxeq _ (opfactor_prop _ _ _ _ _)

end DispBifib
