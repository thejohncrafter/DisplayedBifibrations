import DispBifib.Notation
import DispBifib.IdxEq
import DispBifib.Category

import DispBifib.Displayed

namespace DispBifib

structure Cocartesian
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ}
  {a‚ÇÄ b‚ÇÄ : C‚ÇÄ} {a : C a‚ÇÄ} {b : C b‚ÇÄ}
  {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} (f : a [ f‚ÇÄ ]‚ü∂ b)
where
  cobang
    : {c‚ÇÄ : C‚ÇÄ} ‚Üí {c : C c‚ÇÄ}
    ‚Üí {g‚ÇÄ : a‚ÇÄ ‚ü∂ c‚ÇÄ} ‚Üí (g : a [ g‚ÇÄ ]‚ü∂ c)
    ‚Üí (w‚ÇÄ : b‚ÇÄ ‚ü∂ c‚ÇÄ)
    ‚Üí f‚ÇÄ ‚â´ w‚ÇÄ = g‚ÇÄ
    ‚Üí (b [ w‚ÇÄ ]‚ü∂ c)
  cobang_prop :
    ‚àÄ {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ},
    ‚àÄ {g‚ÇÄ : a‚ÇÄ ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c),
    ‚àÄ (w‚ÇÄ : b‚ÇÄ ‚ü∂ c‚ÇÄ),
      (h : f‚ÇÄ ‚â´ w‚ÇÄ = g‚ÇÄ) ‚Üí f ‚â´ cobang g w‚ÇÄ h =* g
  cobang_unique :
    ‚àÄ {g‚ÇÄ : a‚ÇÄ ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c),
    ‚àÄ (w‚ÇÄ : b‚ÇÄ ‚ü∂ c‚ÇÄ), (h : f‚ÇÄ ‚â´ w‚ÇÄ = g‚ÇÄ) ‚Üí
    ‚àÄ (w' : b [ w‚ÇÄ ]‚ü∂ c),
      f ‚â´ w' =* g ‚Üí w' = cobang g w‚ÇÄ h

class Opfibration
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ)
where
  cleavage_obj
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ}
    ‚Üí (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ)
    ‚Üí (a : C a‚ÇÄ)
    ‚Üí C b‚ÇÄ
  cleavage_hom
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ}
    ‚Üí (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ)
    ‚Üí (a : C a‚ÇÄ)
    ‚Üí (a [ f‚ÇÄ ]‚ü∂ cleavage_obj f‚ÇÄ a)
  cleavage_prop
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ}
    ‚Üí (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ)
    ‚Üí (a : C a‚ÇÄ)
    ‚Üí Cocartesian (cleavage_hom f‚ÇÄ a)

def oplift_obj
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  : {x y : C‚ÇÄ} ‚Üí (f : x ‚ü∂ y) ‚Üí C x ‚Üí C y
:= fib.cleavage_obj

def oplift_hom
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  : {x y : C‚ÇÄ} ‚Üí (f : x ‚ü∂ y) ‚Üí (a : C x) ‚Üí (a [ f ]‚ü∂ oplift_obj f a)
:= fib.cleavage_hom

def cobang
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (a : C x)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : x ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c)
  (w‚ÇÄ : y ‚ü∂ c‚ÇÄ)
  (h : f ‚â´ w‚ÇÄ = g‚ÇÄ)
  : (oplift_obj f a) [ w‚ÇÄ ]‚ü∂ c
:= (fib.cleavage_prop f a).cobang g w‚ÇÄ h

def cobang_prop
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (a : C x)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : x ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c)
  (w‚ÇÄ : y ‚ü∂ c‚ÇÄ)
  (h : f ‚â´ w‚ÇÄ = g‚ÇÄ)
  : oplift_hom f a ‚â´ cobang f a g w‚ÇÄ h =* g
:= (fib.cleavage_prop f a).cobang_prop g w‚ÇÄ h

def cobang_unique
  {C‚ÇÄ : Category.{u,v}} {C : Category.Displayed C‚ÇÄ} [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) (a : C x)
  {c‚ÇÄ : C‚ÇÄ} {c : C c‚ÇÄ} {g‚ÇÄ : x ‚ü∂ c‚ÇÄ} (g : a [ g‚ÇÄ ]‚ü∂ c)
  (w‚ÇÄ : y ‚ü∂ c‚ÇÄ)
  (h : f ‚â´ w‚ÇÄ = g‚ÇÄ)
  : ‚àÄ (w' : (oplift_obj f a) [ w‚ÇÄ ]‚ü∂ c),
    (oplift_hom f a ‚â´ w' =* g) ‚Üí w' = cobang f a g w‚ÇÄ h
:= (fib.cleavage_prop f a).cobang_unique g w‚ÇÄ h

def pushforward_functor
  {C‚ÇÄ : Category.{u,v}} (C : Category.Displayed C‚ÇÄ) [fib : Opfibration C]
  {x y : C‚ÇÄ} (f : x ‚ü∂ y) : fiber C x ‚áí fiber C y
where
  map a := oplift_obj f a
  fmap {a a' : C x} (g : a [ ùüô x ]‚ü∂ a') :=
    have p : f ‚â´ ùüô y = ùüô x ‚â´ f := by rw [C‚ÇÄ.id_comp, C‚ÇÄ.comp_id]
    cobang f a (g ‚â´ oplift_hom f a') (ùüô y) p
  fmap_id a := by
    symm
    apply cobang_unique f a
    exact .trans (C.comp_id _) (C.id_comp _).symm
  fmap_comp {a‚ÇÅ a‚ÇÇ a‚ÇÉ} g g' := by
    dsimp
    symm
    apply cobang_unique f a‚ÇÅ
    apply IdxEq.trans3
      (comp_idxeq _ (fiber_comp_eq _ _))
      _
      (idxeq_comp (fiber_comp_eq _ _).symm _)
    apply IdxEq.trans3 (C.assoc _ _ _).symm _ (C.assoc _ _ _).symm
    apply IdxEq.trans (idxeq_comp (cobang_prop f a‚ÇÅ _ _ _) _) _
    apply IdxEq.trans (C.assoc _ _ _)
    apply comp_idxeq _ (cobang_prop _ _ _ _ _)

end DispBifib
