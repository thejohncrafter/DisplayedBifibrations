import DispBifib.Notation
import DispBifib.IdxEq
import DispBifib.Category

import DispBifib.Displayed.DisplayedCategory

namespace DispBifib

protected structure Functor.Displayed
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  (C : Category.Displayed C‚ÇÄ) (D : Category.Displayed D‚ÇÄ)
  (F : C‚ÇÄ ‚áí D‚ÇÄ)
where
  map : {a‚ÇÄ : C‚ÇÄ} ‚Üí (a : C a‚ÇÄ) ‚Üí D (F a‚ÇÄ)
  fmap
    : {a‚ÇÄ b‚ÇÄ : C‚ÇÄ} ‚Üí {a : C a‚ÇÄ} ‚Üí {b : C b‚ÇÄ}
    ‚Üí {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} ‚Üí (a [f‚ÇÄ]‚ü∂ b) ‚Üí ((map a) [ F.fmap f‚ÇÄ ]‚ü∂ map b)
  fmap_id : ‚àÄ {a‚ÇÄ : C‚ÇÄ} (a : C a‚ÇÄ), fmap (ùüô a) =* ùüô (map a)
  fmap_comp :
    ‚àÄ {a‚ÇÄ b‚ÇÄ c‚ÇÄ : C‚ÇÄ} {a : C a‚ÇÄ} {b : C b‚ÇÄ} {c : C c‚ÇÄ},
    ‚àÄ {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} {g‚ÇÄ : b‚ÇÄ ‚ü∂ c‚ÇÄ} (f : a [f‚ÇÄ]‚ü∂ b) (g : b [g‚ÇÄ]‚ü∂ c),
      fmap (f ‚â´ g) =* fmap f ‚â´ fmap g

instance
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  (C : Category.Displayed C‚ÇÄ) (D : Category.Displayed D‚ÇÄ)
  (F : C‚ÇÄ ‚áí D‚ÇÄ)
  : CoeFun (Functor.Displayed C D F) (fun _ => {a : C‚ÇÄ} ‚Üí C a ‚Üí D (F a))
where
  coe F := F.map

@[ext]
protected structure NatTrans.Displayed
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ G‚ÇÄ : Functor C‚ÇÄ D‚ÇÄ}
  (F : Functor.Displayed C D F‚ÇÄ) (G : Functor.Displayed C D G‚ÇÄ)
  (Œ± : NatTrans F‚ÇÄ G‚ÇÄ)
where
  app : {a‚ÇÄ : C‚ÇÄ} ‚Üí (a : C a‚ÇÄ) ‚Üí ((F a) [Œ±.app a‚ÇÄ]‚ü∂ G a)
  naturality :
    ‚àÄ {a‚ÇÄ b‚ÇÄ: C‚ÇÄ} {a : C a‚ÇÄ} {b : C b‚ÇÄ} {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} (f : a [f‚ÇÄ]‚ü∂ b),
      F.fmap f ‚â´ app b =* app a ‚â´ G.fmap f

theorem NatTrans.Displayed.ext'
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ G‚ÇÄ : Functor C‚ÇÄ D‚ÇÄ}
  {F : Functor.Displayed C D F‚ÇÄ} {G : Functor.Displayed C D G‚ÇÄ}
  {Œ±‚ÇÄ Œ≤‚ÇÄ : NatTrans F‚ÇÄ G‚ÇÄ}
  {Œ± : NatTrans.Displayed F G Œ±‚ÇÄ} {Œ≤ : NatTrans.Displayed F G Œ≤‚ÇÄ}
  (base : Œ±‚ÇÄ = Œ≤‚ÇÄ)
  (app : ‚àÄ {a‚ÇÄ : C‚ÇÄ} (a : C a‚ÇÄ), Œ±.app a =* Œ≤.app a)
  : Œ± =* Œ≤
:= by
  subst base
  apply idx_eq_of_eq
  ext a‚ÇÄ a
  apply eq_of_idx_eq
  exact app a

def NatTrans.Displayed.id
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ : C‚ÇÄ ‚áí D‚ÇÄ} (F : Functor.Displayed C D F‚ÇÄ) : NatTrans.Displayed F F (id F‚ÇÄ)
where
  app a := ùüô (F a)
  naturality f := by
    dsimp
    have p := D.comp_id (F.fmap f)
    have q := IdxEq.symm <| D.id_comp (F.fmap f)
    exact IdxEq.trans p q

def NatTrans.Displayed.comp
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ G‚ÇÄ H‚ÇÄ : C‚ÇÄ ‚áí D‚ÇÄ}
  {F : Functor.Displayed C D F‚ÇÄ}
  {G : Functor.Displayed C D G‚ÇÄ}
  {H : Functor.Displayed C D H‚ÇÄ}
  {Œ±‚ÇÄ : NatTrans F‚ÇÄ G‚ÇÄ} {Œ≤‚ÇÄ : NatTrans G‚ÇÄ H‚ÇÄ}
  (Œ± : NatTrans.Displayed F G Œ±‚ÇÄ) (Œ≤ : NatTrans.Displayed G H Œ≤‚ÇÄ)
  : NatTrans.Displayed F H (comp Œ±‚ÇÄ Œ≤‚ÇÄ)
where
  app a := Œ±.app a ‚â´ Œ≤.app a
  naturality {_ _ a b _} f := by
    have p‚ÇÅ := D.assoc (F.fmap f) (Œ±.app _) (Œ≤.app _)
    have p‚ÇÇ := Œ±.naturality f
    have p‚ÇÉ := idxCongrArg (¬∑ ‚â´ Œ≤.app b) p‚ÇÇ
    have p := IdxEq.trans p‚ÇÅ.symm p‚ÇÉ
    have q‚ÇÅ := D.assoc (Œ±.app _) (Œ≤.app _) (H.fmap f)
    have q‚ÇÇ := Œ≤.naturality f
    have q‚ÇÉ := idxCongrArg (Œ±.app a ‚â´ ¬∑) q‚ÇÇ
    have q := IdxEq.trans q‚ÇÉ q‚ÇÅ.symm
    exact IdxEq.trans3 p (D.assoc _ _ _) q

theorem NatTrans.Displayed.id_comp
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ G‚ÇÄ : Functor C‚ÇÄ D‚ÇÄ}
  {F : Functor.Displayed C D F‚ÇÄ}
  {G : Functor.Displayed C D G‚ÇÄ}
  {Œ±‚ÇÄ : NatTrans F‚ÇÄ G‚ÇÄ} (Œ± : NatTrans.Displayed F G Œ±‚ÇÄ)
  : comp (id F) Œ± =* Œ±
:= by
  apply NatTrans.Displayed.ext'
  . apply NatTrans.id_comp
  . intro _ _
    exact D.id_comp _

theorem NatTrans.Displayed.comp_id
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ G‚ÇÄ : Functor C‚ÇÄ D‚ÇÄ}
  {F : Functor.Displayed C D F‚ÇÄ}
  {G : Functor.Displayed C D G‚ÇÄ}
  {Œ±‚ÇÄ : NatTrans F‚ÇÄ G‚ÇÄ} (Œ± : NatTrans.Displayed F G Œ±‚ÇÄ)
  : comp Œ± (id G) =* Œ±
:= by
  apply NatTrans.Displayed.ext'
  . apply NatTrans.comp_id
  . intro _ _
    exact D.comp_id _

theorem NatTrans.Displayed.assoc
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  {C : Category.Displayed C‚ÇÄ} {D : Category.Displayed D‚ÇÄ}
  {F‚ÇÄ G‚ÇÄ H‚ÇÄ K‚ÇÄ : C‚ÇÄ ‚áí D‚ÇÄ}
  {F : Functor.Displayed C D F‚ÇÄ}
  {G : Functor.Displayed C D G‚ÇÄ}
  {H : Functor.Displayed C D H‚ÇÄ}
  {K : Functor.Displayed C D K‚ÇÄ}
  {Œ±‚ÇÄ : NatTrans F‚ÇÄ G‚ÇÄ} {Œ≤‚ÇÄ : NatTrans G‚ÇÄ H‚ÇÄ} {Œ≥‚ÇÄ : NatTrans H‚ÇÄ K‚ÇÄ}
  (Œ± : NatTrans.Displayed F G Œ±‚ÇÄ)
  (Œ≤ : NatTrans.Displayed G H Œ≤‚ÇÄ)
  (Œ≥ : NatTrans.Displayed H K Œ≥‚ÇÄ)
  : comp (comp Œ± Œ≤) Œ≥ =* comp Œ± (comp Œ≤ Œ≥)
:= by
  apply NatTrans.Displayed.ext'
  . apply NatTrans.assoc
  . intro _ _
    exact D.assoc _ _ _

def FunctorCategory.Displayed
  {C‚ÇÄ : Category.{u‚ÇÅ,v‚ÇÅ}} {D‚ÇÄ : Category.{u‚ÇÇ,v‚ÇÇ}}
  (C : Category.Displayed C‚ÇÄ) (D : Category.Displayed D‚ÇÄ)
  : Category.Displayed (C‚ÇÄ ‚áí D‚ÇÄ)
where
  obj := Functor.Displayed C D
  hom := NatTrans.Displayed
  id := NatTrans.Displayed.id
  comp := NatTrans.Displayed.comp
  id_comp := NatTrans.Displayed.id_comp
  comp_id := NatTrans.Displayed.comp_id
  assoc := NatTrans.Displayed.assoc

end DispBifib
